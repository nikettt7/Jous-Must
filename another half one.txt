<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Joust HTML5 Replica</title>
    <style>
        @font-face {
            font-family: 'ArcadeFont';
            src: url('data:application/font-woff2;charset=utf-8;base64,d09GMgABAAAAAAVMAA0AAAAAChwAAAT1AAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP0ZGVE0cGh4GYACCWggEEQgKnHSVPQtIAAE2AiQDSAQgBYwGB4FIDG8PUVRNXTJkPw/cbLJRo02TiNV+PYb6zAx7kbysoK+m+/tHBxZfAZGgBAAMPkYBwfD//v7W2XvfP23/jzuTZrI1/y6J1qTBLNEIGZt09Sqp6IqEiJDMTCEQSFbCBLwzVq6g6QvSJZ0XzMuDcU8TbCIIZUc4VJz83m00zMcDm8PNrGCTNMbOxq1sBgzZsJgYGLQA+l81MBfAx+tCMYZMXpvsjXHkLq0k2TRtRuq0IrGJKLuTONt9E4jnH58F/r/W2jvDzORGkiCpEonI7n3wAAFhj4cDiBAJSGIVEiVCVJpUe/OWp5QCSdvZFhgDmKAFwDDMBACYzb1lDAAYn32VEgBQPvMJSACCKEsYAZCUHCkAwkhYDCvhKgcIEn0KEABuQ6QO9Fl/xLf7xnBEr7dGPxCHUAZy6eFNyVyprw59UW+PKXmSKvWuO3L1tHr12uU/D0l7EoQkfQw5Xw7X0PqPCg0pI5UyCNt0V9XGKlMiODlSG6sK3aSRKD/UvUvz52Lnr1f3TMZR1+xaHjVjYbK9m1RQPLbdO9OuRRZXv7dkZiSQ78vcUFTWtfdISXdmVXXnMQw7tHjhztb31lxq36qMGa5dUPbr4vWLFrx3ZO5aVNY2q6q8aVjNgZlXL15fU9IrKmOzK8G9C0sr3uH6zcJYQBSVvdNLK6seSioZyiiM42p2LBGFVUzVAG1t/2MlpVEzFg7X7hIzY1FVUMY93XwLxUTZnqvHMqYnQiK/rJ/JMlwu+sYOl5ByTXGzBH9+W9OeDLlpYVb9zg17sPzuVPtdTbtmqTYjH9ZKVf0bHm7YEBSXMlnd7LgU5pQn+S1vL5pMmTVZlVFN3kLXppq0/C+pWJPQ+/tIlHaSidS4X1dUTt9t/nNiY+HQUJxdGmF7c6YKGK9M6mRmcn9QLCcqcvsvgc9nspTqLVdqfF/HCZUFKqbKOeW23J/v1MJADKVrXG7n9HU1KdJ+qaPD2VC3/GZZt27Vnsa8rNJBZtPBhrGG3Oy55U1zGw4xpNbULa2rIiUnvzgfZfWvvJhFXVjTnpddhOuKUVr7PIdHOTVVrK1eKJ4+N6e6Mc1XmJLZkJZTXF7OuFz5xatqKc+qqVvO9SvLSc5vXN1EpVfl5tTMGFc5bGF91fK6JT6UkpNfXC/M92w5eTk1T1+7LFp2rW5V6s8fjXV5VuLVvH8ywYRYDw97KneMq9KcXD8SSSU0oLGYGMm0dHfr1/Pq1Lq7u9vRE0GpPiLY7erWHb3Q3fF7V1eHbn+MG5FyuV1Hv+zu7HTq7Zc6ursdOn6Rf1q6aJHbPYVdsmjdcZ6bIQO0o8wQ4F9MjSNDeMw67I7yiHp2B0CIsAkORPNzSEfq2vRPdZHfVU/rHXCBELGSE7H+eCTZkZRojM6X0+q+N2LS+3lkH79ys/qptjfKIwYOEqjPZS7UDCmVMgCvnmOOa7BqfhQjg4mOQaAdgA02koxnM8G6FAIDAJjO5pCVT6NNwHQGENDIZoCgkBUAlrUGwFYhByBghQGQhMWASoOJigG7sQUByDq7w5FzLhyO3HObCCfOpULEkXN+gZJLPiBYcg0CKLnFJOQKLp4ZQVNnIy4qbDbK9FQOGGWWYfaqNnQmjHf0aISh9sSDOqVcpxIzHUZkTsrVkDFrKXZCz7KE57YS4SyzjF5eMRvJPMWiAZnMbdnbgCvtPnQWIV5MWKTFLLNbJdv51iB7jdgzavPQOZvVqnNWK9AzahMb0+j9P1OVOcYKlNaYXM9EjQEA</data:application/font-woff2;charset=utf-8;base64,>
        }

        body {
            margin: 0;
            padding: 0;
            background-color: #000;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            overflow: hidden;
            font-family: 'ArcadeFont', monospace;
            color: #fff;
        }

        #game-container {
            position: relative;
            width: 800px;
            height: 600px;
            margin: auto;
        }

        canvas {
            display: block;
            background-color: #000;
            image-rendering: pixelated;
        }

        #menu {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            background-color: rgba(0, 0, 0, 0.8);
        }

        #title {
            font-size: 48px;
            margin-bottom: 40px;
            color: #ffcc00;
            text-shadow: 4px 4px 0px #660000;
        }

        .menu-button {
            font-family: 'ArcadeFont', monospace;
            font-size: 24px;
            margin: 10px;
            padding: 10px 20px;
            background-color: #660000;
            color: #ffcc00;
            border: 4px solid #ffcc00;
            cursor: pointer;
            transition: all 0.2s;
        }

        .menu-button:hover {
            background-color: #990000;
            transform: scale(1.05);
        }

        #game-over {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            display: none;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            background-color: rgba(0, 0, 0, 0.8);
            z-index: 10;
        }

        #game-over h2 {
            font-size: 48px;
            color: #ff0000;
            margin-bottom: 30px;
        }

        #score-display {
            font-size: 24px;
            color: #ffcc00;
            margin-bottom: 30px;
        }

        #hud {
            position: absolute;
            top: 10px;
            left: 10px;
            font-size: 20px;
            color: #ffcc00;
        }

        #controls-info {
            position: absolute;
            bottom: 10px;
            left: 10px;
            font-size: 14px;
            color: #fff;
        }

        #audio-toggle {
            position: absolute;
            top: 10px;
            right: 10px;
            font-size: 16px;
            color: #ffcc00;
            background-color: #660000;
            border: 2px solid #ffcc00;
            padding: 5px 10px;
            cursor: pointer;
        }
    </style>
</head>
<body>
    <div id="game-container">
        <canvas id="gameCanvas" width="800" height="600"></canvas>
        
        <div id="menu">
            <div id="title">JOUST</div>
            <button class="menu-button" id="one-player">ONE PLAYER</button>
            <button class="menu-button" id="two-player">TWO PLAYERS</button>
        </div>
        
        <div id="game-over">
            <h2>GAME OVER</h2>
            <div id="score-display">SCORE: 0</div>
            <button class="menu-button" id="play-again">PLAY AGAIN</button>
        </div>
        
        <div id="hud">
            <div id="p1-score">P1: 0</div>
            <div id="p2-score">P2: 0</div>
            <div id="lives">LIVES: 3</div>
            <div id="wave">WAVE: 1</div>
        </div>
        
        <div id="controls-info">
            P1: SPACE TO FLAP | P2: UP ARROW TO FLAP
        </div>

        <button id="audio-toggle">SOUND: ON</button>
    </div>

    <script>
        // Audio Manager for sounds
        const AudioManager = {
            sounds: {},
            soundsLoaded: 0,
            totalSounds: 6,
            muted: false,
            
            // Load all game sounds
            init: function() {
                // Define all game sounds here
                this.totalSounds = 6;
                
                // Using base64 encoded sounds to avoid local path issues
                // These would normally be replaced with proper audio files
                const soundUrls = {
                    'flap': 'data:audio/wav;base64,UklGRhwAAABXQVZFZm10IBAAAAABAAEARKwAAIhYAQACABAAZGF0YQQAAAA=',
                    'enemyDefeat': 'data:audio/wav;base64,UklGRhwAAABXQVZFZm10IBAAAAABAAEARKwAAIhYAQACABAAZGF0YQQAAAA=',
                    'playerDeath': 'data:audio/wav;base64,UklGRhwAAABXQVZFZm10IBAAAAABAAEARKwAAIhYAQACABAAZGF0YQQAAAA=',
                    'pterodactyl': 'data:audio/wav;base64,UklGRhwAAABXQVZFZm10IBAAAAABAAEARKwAAIhYAQACABAAZGF0YQQAAAA=',
                    'gameOver': 'data:audio/wav;base64,UklGRhwAAABXQVZFZm10IBAAAAABAAEARKwAAIhYAQACABAAZGF0YQQAAAA=',
                    'eggCollected': 'data:audio/wav;base64,UklGRhwAAABXQVZFZm10IBAAAAABAAEARKwAAIhYAQACABAAZGF0YQQAAAA='
                };
                
                // Load each sound
                for (const [name, url] of Object.entries(soundUrls)) {
                    this.load(name, url);
                }
                
                // Setup audio toggle button
                const audioToggle = document.getElementById('audio-toggle');
                audioToggle.addEventListener('click', () => {
                    this.muted = !this.muted;
                    audioToggle.textContent = `SOUND: ${this.muted ? 'OFF' : 'ON'}`;
                });
                
                console.log('Audio system initialized');
            },
            
            // Load individual sounds
            load: function(name, path) {
                this.sounds[name] = new Audio(path);
                this.sounds[name].addEventListener('canplaythrough', () => {
                    this.soundsLoaded++;
                    console.log(`Loaded sound: ${name}`);
                    if (this.soundsLoaded === this.totalSounds) {
                        console.log('All sounds loaded');
                    }
                });
                this.sounds[name].addEventListener('error', (e) => {
                    console.warn(`Error loading sound: ${name}`, e);
                    // Continue even if sounds fail to load
                    this.soundsLoaded++;
                });
            },
            
            // Play a sound
            play: function(name) {
                if (this.muted) return;
                
                if (this.sounds[name]) {
                    try {
                        // Create a clone for overlapping sounds
                        const sound = this.sounds[name].cloneNode();
                        sound.volume = 0.5; // Adjust volume as needed
                        sound.play().catch(e => {
                            // Handle autoplay restrictions
                            console.warn(`Couldn't play sound: ${name}`, e);
                        });
                    } catch (e) {
                        console.warn(`Error playing sound: ${name}`, e);
                    }
                }
            }
        };

        // Game constants
        const CANVAS_WIDTH = 800;
        const CANVAS_HEIGHT = 600;
        const GRAVITY = 0.4;
        const FLAP_POWER = -8;
        const FRICTION = 0.98;
        const MAX_SPEED = 10;
        
        // Game state
        let gameState = 'menu'; // menu, playing, gameOver
        let playerCount = 1;
        let wave = 1;
        let score = [0, 0]; // Player 1 and 2 scores
        let lives = 3;
        let platforms = [];
        let eggs = [];
        let enemies = [];
        let pterodactyls = [];
        let lastEnemySpawn = 0;
        let lastPterodactylSpawn = 0;
        let enemySpawnInterval = 5000; // milliseconds
        let pterodactylSpawnInterval = 15000; // milliseconds
        let enemySpawnChance = 0.7; // Chance an enemy spawns when interval is met
        let pterodactylSpawnChance = 0.3; // Chance a pterodactyl appears
        let players = [];
        
        // HTML Elements
        const canvas = document.getElementById('gameCanvas');
        const ctx = canvas.getContext('2d');
        const menu = document.getElementById('menu');
        const gameOverScreen = document.getElementById('game-over');
        const scoreDisplay = document.getElementById('score-display');
        const p1ScoreDisplay = document.getElementById('p1-score');
        const p2ScoreDisplay = document.getElementById('p2-score');
        const livesDisplay = document.getElementById('lives');
        const waveDisplay = document.getElementById('wave');
        
        // Init audio
        AudioManager.init();
        
        // Event listeners for menu buttons
        document.getElementById('one-player').addEventListener('click', () => startGame(1));
        document.getElementById('two-player').addEventListener('click', () => startGame(2));
        document.getElementById('play-again').addEventListener('click', () => {
            gameOverScreen.style.display = 'none';
            menu.style.display = 'flex';
        });
        
        // Input handling
        const keys = {};
        window.addEventListener('keydown', (e) => {
            keys[e.code] = true;
            
            // Prevent spacebar from scrolling the page
            if (e.code === 'Space') {
                e.preventDefault();
            }
        });
        
        window.addEventListener('keyup', (e) => {
            keys[e.code] = false;
        });
        
        // Player class
        class Player {
            constructor(x, y, isPlayerTwo = false) {
                this.x = x;
                this.y = y;
                this.width = 40;
                this.height = 40;
                this.velocityX = 0;
                this.velocityY = 0;
                this.isPlayerTwo = isPlayerTwo;
                this.isFlapping = false;
                this.direction = 1; // 1 for right, -1 for left
                this.invulnerable = false;
                this.invulnerableTimer = 0;
                this.flapKey = isPlayerTwo ? 'ArrowUp' : 'Space';
                this.moveLeftKey = isPlayerTwo ? 'ArrowLeft' : 'KeyA';
                this.moveRightKey = isPlayerTwo ? 'ArrowRight' : 'KeyD';
                this.color = isPlayerTwo ? '#00AAFF' : '#FFCC00';
                this.lastFlapTime = 0;
            }
            
            update(deltaTime) {
                // Movement controls
                if (keys[this.flapKey]) {
                    const now = Date.now();
                    if (!this.isFlapping) {
                        this.velocityY += FLAP_POWER;
                        this.isFlapping = true;
                        // Play flap sound with a slight cooldown to prevent sound spam
                        if (now - this.lastFlapTime > 150) {
                            AudioManager.play('flap');
                            this.lastFlapTime = now;
                        }
                    }
                } else {
                    this.isFlapping = false;
                }
                
                if (keys[this.moveLeftKey]) {
                    this.velocityX -= 0.5;
                    this.direction = -1;
                }
                
                if (keys[this.moveRightKey]) {
                    this.velocityX += 0.5;
                    this.direction = 1;
                }
                
                // Apply physics
                this.velocityY += GRAVITY;
                this.velocityX *= FRICTION;
                
                // Limit speed
                if (this.velocityX > MAX_SPEED) this.velocityX = MAX_SPEED;
                if (this.velocityX < -MAX_SPEED) this.velocityX = -MAX_SPEED;
                if (this.velocityY > MAX_SPEED) this.velocityY = MAX_SPEED;
                if (this.velocityY < -MAX_SPEED) this.velocityY = -MAX_SPEED;
                
                // Update position
                this.x += this.velocityX;
                this.y += this.velocityY;
                
                // Screen wrapping
                if (this.x < -this.width) this.x = CANVAS_WIDTH;
                if (this.x > CANVAS_WIDTH) this.x = -this.width;
                
                // Floor/ceiling collision
                if (this.y < 0) {
                    this.y = 0;
                    this.velocityY = 0;
                }
                if (this.y > CANVAS_HEIGHT - this.height) {
                    this.y = CANVAS_HEIGHT - this.height;
                    this.velocityY = -this.velocityY * 0.5; // Bounce slightly
                }
                
                // Platform collision
                this.checkPlatformCollision();
                
                // Update invulnerability
                if (this.invulnerable) {
                    this.invulnerableTimer -= deltaTime;
                    if (this.invulnerableTimer <= 0) {
                        this.invulnerable = false;
                    }
                }
            }
            
            checkPlatformCollision() {
                for (const platform of platforms) {
                    if (this.velocityY > 0 && // Only collide when falling
                        this.x + this.width > platform.x &&
                        this.x < platform.x + platform.width &&
                        this.y + this.height >= platform.y &&
                        this.y + this.height <= platform.y + platform.height / 2) {
                        
                        this.y = platform.y - this.height;
                        this.velocityY = 0;
                        break;
                    }
                }
            }
            
            makeInvulnerable(duration) {
                this.invulnerable = true;
                this.invulnerableTimer = duration;
            }
            
            draw() {
                // Blinking effect when invulnerable
                if (this.invulnerable && Math.floor(this.invulnerableTimer / 100) % 2 === 0) {
                    return;
                }
                
                ctx.save();
                ctx.fillStyle = this.color;
                
                // Draw the player as a knight on an ostrich
                ctx.translate(this.x + this.width / 2, this.y + this.height / 2);
                if (this.direction === -1) {
                    ctx.scale(-1, 1);
                }
                
                // Ostrich body
                ctx.fillRect(-15, -5, 30, 20);
                
                // Ostrich head and neck
                ctx.fillRect(-15, -15, 10, 15);
                
                // Knight
                ctx.fillStyle = this.isPlayerTwo ? '#0088CC' : '#CC8800';
                ctx.fillRect(-5, -20, 20, 15);
                
                // Lance
                ctx.fillStyle = '#FFF';
                ctx.fillRect(15, -15, 15, 5);
                
                // Wings animation based on flapping
                if (this.isFlapping) {
                    ctx.fillStyle = this.color;
                    ctx.beginPath();
                    ctx.moveTo(-15, 0);
                    ctx.lineTo(-30, -15);
                    ctx.lineTo(-5, -5);
                    ctx.fill();
                }
                
                ctx.restore();
            }
        }
        
        // Enemy class
        class Enemy {
            constructor(x, y, type = 'buzzard') {
                this.x = x;
                this.y = y;
                this.width = 40;
                this.height = 40;
                this.velocityX = Math.random() < 0.5 ? -1 : 1;
                this.velocityY = 0;
                this.type = type; // buzzard or hunter
                this.flapCooldown = 0;
                this.direction = this.velocityX > 0 ? 1 : -1;
                
                // Type-specific properties
                if (type === 'hunter') {
                    this.color = '#FF0000';
                    this.intelligence = 0.7; // Higher chance to chase player
                } else {
                    this.color = '#00FF00';
                    this.intelligence = 0.3; // Lower chance to chase player
                }
            }
            
            update(deltaTime, players) {
                // AI behavior
                this.flapCooldown -= deltaTime;
                
                // Find closest player to chase
                let closestPlayer = null;
                let closestDistance = Infinity;
                
                for (const player of players) {
                    if (player) {
                        const dx = player.x - this.x;
                        const dy = player.y - this.y;
                        const distance = Math.sqrt(dx * dx + dy * dy);
                        
                        if (distance < closestDistance) {
                            closestDistance = distance;
                            closestPlayer = player;
                        }
                    }
                }
                
                // Chase behavior
                if (closestPlayer && Math.random() < this.intelligence) {
                    // Chase horizontally
                    if (closestPlayer.x < this.x) {
                        this.velocityX -= 0.1;
                        this.direction = -1;
                    } else {
                        this.velocityX += 0.1;
                        this.direction = 1;
                    }
                    
                    // Chase vertically - flap when above player
                    if (closestPlayer.y < this.y && this.flapCooldown <= 0) {
                        this.velocityY += FLAP_POWER * 0.7; // Enemies flap weaker than players
                        this.flapCooldown = 500 + Math.random() * 500; // Random flap interval
                    }
                } else if (this.flapCooldown <= 0) {
                    // Random flapping when not chasing
                    if (Math.random() < 0.05) {
                        this.velocityY += FLAP_POWER * 0.7;
                        this.flapCooldown = 1000 + Math.random() * 1000;
                    }
                }
                
                // Apply physics
                this.velocityY += GRAVITY;
                this.velocityX *= FRICTION;
                
                // Limit speed
                if (this.velocityX > MAX_SPEED * 0.7) this.velocityX = MAX_SPEED * 0.7;
                if (this.velocityX < -MAX_SPEED * 0.7) this.velocityX = -MAX_SPEED * 0.7;
                if (this.velocityY > MAX_SPEED) this.velocityY = MAX_SPEED;
                if (this.velocityY < -MAX_SPEED) this.velocityY = -MAX_SPEED;
                
                // Update position
                this.x += this.velocityX;
                this.y += this.velocityY;
                
                // Screen wrapping
                if (this.x < -this.width) this.x = CANVAS_WIDTH;
                if (this.x > CANVAS_WIDTH) this.x = -this.width;
                
                // Floor/ceiling collision
                if (this.y < 0) {
                    this.y = 0;
                    this.velocityY = 0;
                }
                if (this.y > CANVAS_HEIGHT - this.height) {
                    this.y = CANVAS_HEIGHT - this.height;
                    this.velocityY = -this.velocityY * 0.5; // Bounce slightly
                }
                
                // Platform collision
                this.checkPlatformCollision();
            }
            
            checkPlatformCollision() {
                for (const platform of platforms) {
                    if (this.velocityY > 0 && // Only collide when falling
                        this.x + this.width > platform.x &&
                        this.x < platform.x + platform.width &&
                        this.y + this.height >= platform.y &&
                        this.y + this.height <= platform.y + platform.height / 2) {
                        
                        this.y = platform.y - this.height;
                        this.velocityY = 0;
                        break;
                    }
                }
            }
            
            draw() {
                ctx.save();
                ctx.fillStyle = this.color;
                
                // Draw the enemy as a knight on an ostrich (similar to player but different color)
                ctx.translate(this.x + this.width / 2, this.y + this.height / 2);
                if (this.direction === -1) {
                    ctx.scale(-1, 1);
                }
                
                // Ostrich body
                ctx.fillRect(-15, -5, 30, 20);
                
                // Ostrich head and neck
                ctx.fillRect(-15, -15, 10, 15);
                
                // Knight - different color based on enemy type
                ctx.fillStyle = this.type === 'hunter' ? '#990000' : '#009900';
                ctx.fillRect(-5, -20, 20, 15);
                
                // Lance
                ctx.fillStyle = '#FFF';
                ctx.fillRect(15, -15, 15, 5);
                
                // Wings animation based on flap cooldown
                if (this.flapCooldown > 0 && this.flapCooldown % 60 < 30) {
                    ctx.fillStyle = this.color;
                    ctx.beginPath();
                    ctx.moveTo(-15, 0);
                    ctx.lineTo(-30, -15);
                    ctx.lineTo(-5, -5);
                    ctx.fill();
                }
                
                ctx.restore();
            }
        }
        
        // Pterodactyl class (special enemy)
        class Pterodactyl {
            constructor() {
                this.width = 60;
                this.height = 30;
                this.y = 100 + Math.random() * 200; // Keep them in the upper part of the screen
                this.direction = Math.random() < 0.5 ? -1 : 1;
                this.x = this.direction > 0 ? -this.width : CANVAS_WIDTH;
                this.speed = 3 + Math.random() * 2;
                this.velocityX = this.speed * this.direction;
                this.velocityY = Math.sin(Date.now() / 500) * 2; // Wavy motion
                this.score